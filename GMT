// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract GamingToken is ERC20, Ownable, ERC20Burnable {
    event Redeemed(address indexed gamer, string rewardType);

    constructor(address initialOwner) ERC20("GAMETOKEN", "GMT") Ownable(initialOwner) {}

    function mint(address account, uint256 num_tokens) external onlyOwner {
        _mint(account, num_tokens);
    }

    function _burn(uint256 num_tokens) external {
        require(balanceOf(msg.sender) >= num_tokens, "Not enough funds!");
        _burn(msg.sender, num_tokens);
    }

    function transferTokens(address destination, uint256 num_tokens) external {
        require(balanceOf(msg.sender) >= num_tokens, "Not enough funds!");
        _transfer(msg.sender, destination, num_tokens);
    }

    function redeemReward(string memory rewardType) external {
        require(balanceOf(msg.sender) >= 1, "Not enough funds!");

        uint256 tokensToBurn;

        if (compareStrings(rewardType, "M-14")) {
            tokensToBurn = 2000; // Redeem M-14 for 200 tokens
        } else if (compareStrings(rewardType, "AR-15")) {
            tokensToBurn = 1000; // Redeem AR-15 for 500 tokens
        } else if (compareStrings(rewardType, "GT-650")) {
            tokensToBurn = 1500; // Redeem GT-650 for 1000 tokens
        } else {
            revert("Invalid reward type");
        }

        require(balanceOf(msg.sender) >= tokensToBurn, "Not enough funds");
        _burn(msg.sender, tokensToBurn);
        emit Redeemed(msg.sender, rewardType);
    }

    function compareStrings(string memory a, string memory b) internal pure returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
    }
}
